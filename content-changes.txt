CONTENT CHANGES FOR REVIEW
=============================

This file tracks UI text changes that need review by content writers.

=============================

CHANGE #1: Image Output Section Label
Location: BuildImageModal.tsx - Image output section
Date: [Current Date]

Original Content: "Other"
Current Content: "Additional Formats"
Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User requested to rename "Other" category to something more descriptive. No specific rationale provided.

=============================

CHANGE #2: Base Image Selection Description
Location: BuildImageModal.tsx - Base Image Selection section
Date: [Current Date]

Original Content: "Choose the base operating system and version for your custom image."
Current Content: "The selections on this page may automatically add required packages and/or configurations you'll find in the Repositories and packages step and the Advanced Settings step."
Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User rationale - giving users a heads up about inherited selections. Corrected to say "the selections on this page" instead of "Basic Settings" since there is no Basic Settings section. Updated to specify "Repositories and packages step" instead of just "Packages" for better clarity.

=============================

CHANGE #3: Image Output Description
Location: BuildImageModal.tsx - Image output section
Date: [Current Date]

Original Content: "This is filler text for now."
Current Content: "Select any number of target environments to simultaneously build this image from."
Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User rationale - users in interviewing didn't appear to know if they'd do one process per environment, or if building would be simultaneous.

=============================

CHANGE #4: Image Output Description Link Addition
Location: BuildImageModal.tsx - Image output section
Date: [Current Date]

Original Content: "Select any number of target environments to simultaneously build this image from."
Current Content: "Select any number of target environments to simultaneously build this image from. Learn more about Deploying and managing RHEL systems in the hybrid cloud [external link]"
Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User requested to add a link to Red Hat documentation at the end of the sentence with text "Deploying and managing RHEL systems in the hybrid cloud" and an external link icon. All documentation links in the project are formatted this way.

=============================

CHANGE #5: OVA File Help Icon and Tooltip
Location: BuildImageModal.tsx - Private cloud section (.ova option)
Date: [Current Date]

Original Content: No help text
Current Content: "An OVA file is a virtual appliance used by virtualization platforms such as VMware vSphere. It is a package that contains files used to describe a virtual machine, which includes a VMDK image, OVF descriptor, and a manifest file."
Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User requested to add an outlined question circle icon with hover tooltip to explain what .ova files are. Switched from Popover (click-triggered) to Tooltip (hover-triggered) for better user experience as requested by user.

=============================

CHANGE #6: VMDK File Help Icon and Tooltip
Location: BuildImageModal.tsx - Private cloud section (.vmdk option)
Date: [Current Date]

Original Content: No help text
Current Content: "A VMDK file is a virtual disk that stores the contents of a virtual machine. This disk has to be imported into vSphere using govc import.vmdk, use the OVA version when using the vSphere UI."
Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User requested to add the same question mark icon with tooltip pattern used for .ova files. Uses outlined question circle icon with hover tooltip to explain VMDK files and provide guidance on import methods.

=============================

CHANGE #7: WSL File Help Icon and Tooltip
Location: BuildImageModal.tsx - Additional Formats section (WSL option)
Date: [Current Date]

Original Content: No help text
Current Content: "WSL is not officially supported by Red Hat. Using RHEL on Microsoft's Windows Subsystem for Linux (WSL) is permitted as a Validated Software Platform and Third Party Component Support Policy. More about RHEL on WSL Support [external link to https://access.redhat.com/articles/7115538]"
Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User requested to add tooltip with support disclaimer and policy information. Includes external link to Red Hat documentation about WSL support with external link icon. Uses same question mark icon pattern established for other tooltips. Link color updated to #73bcf7 for better contrast against dark tooltip background.

=============================

CHANGE #5: New Private Cloud Section Addition
Location: BuildImageModal.tsx - Image output section
Date: [Current Date]

Original Content: [No Private cloud section existed]
Current Content: "Private cloud" section with VMware vSphere options:
- VMware vSphere - Open virtualization format (.ova)
- VMware vSphere - Virtual disk (.vmdk)
Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User requested to add a new "Private cloud" section above "Additional Formats" with VMware vSphere checkbox options for .ova and .vmdk formats.

=============================

CHANGE #6: OVA File Popover Help Addition
Location: BuildImageModal.tsx - Private cloud section (.ova checkbox)
Date: [Current Date]

Original Content: Simple checkbox with label "VMware vSphere - Open virtualization format (.ova)"
Current Content: Checkbox with label plus question mark icon that shows popover with explanation: "An OVA file is a virtual appliance used by virtualization platforms such as VMware vSphere. It is a package that contains files used to describe a virtual machine, which includes a VMDK image, OVF descriptor, and a manifest file."
Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User requested to add popover help text with question mark icon to explain what OVA files are for better user understanding.

=============================

CHANGE #8: Enable Repeatable Build Documentation Link
Location: BuildImageModal.tsx - Enable repeatable build section
Date: [Current Date]

Original Content: "Control the consistency of the packages in the repository used to build the image"
Current Content: "Create images that can be reproduced consistently with the same package versions and configurations. Create and manage repositories here [external link]"
Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User requested to add documentation link "Create and manage repositories here" after the microcopy with external link icon. The original copy from the prototype was "Control the consistency of the packages in the repository used to build the image".

=============================

CHANGE #9: Enable Repeatable Build Radio Button Options
Location: BuildImageModal.tsx - Enable repeatable build section
Date: [Current Date]

Original Content: [No radio buttons existed - only had snapshot date field]
Current Content: Three radio button options:
1. "Disable repeatable build" - "Use the newest repository content available when building this image" (default selected)
2. "Enable repeatable build" - "Build this image with the repository content of a selected date" 
3. "Use a content template" - "Select a content template and build this image with repository snapshots included in that template"

Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: Added radio button group to allow users to choose between different repeatable build options. User requested to match screenshot copy exactly. 

INTERACTIVE FUNCTIONALITY: 
- Radio buttons are now fully functional with proper state management
- When "Enable repeatable build" is selected, the snapshot date field appears with required asterisk
- When "Disable repeatable build" is selected, the snapshot date field is hidden and any existing date is cleared
- When "Use a content template" is selected, the snapshot date field is hidden and any existing date is cleared

VALIDATION REQUIREMENT: If "Enable repeatable build" is selected, user must provide a snapshot date before proceeding to review. If they attempt to proceed without a snapshot date, they should be returned to this step with validation message.

=============================

CHANGE #10: Snapshot Date Validation Implementation
Location: BuildImageModal.tsx - Enable repeatable build section
Date: [Current Date]

Original Content: No validation - users could proceed without snapshot date
Current Content: Visual validation implemented with error message:
- Error Message: "Snapshot date is required when Enable repeatable build is selected"
- Error appears as red text below the snapshot date field
- Next button is blocked until snapshot date is provided
- Error clears when user provides a date (via date picker or "Today's date" button)

Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User requested validation to prevent proceeding when "Enable repeatable build" is selected but no snapshot date is provided. Implemented with PatternFly v6 FormHelperText/HelperText pattern for error display. Error message provides clear guidance on the requirement.

=============================

CHANGE #11: First Boot Configuration Section Rename and Content Updates
Location: BuildImageModal.tsx - First boot configuration section (formerly Kickstart File)
Date: [Current Date]

Original Content: 
- Section Title: "Kickstart File"
- Description: "This is filler text for now."
- Placeholder text: "Manually enter the kickstart CSV data here."
- Helper text: "Upload a CSV file"

Current Content:
- Section Title: "First boot configuration" 
- Description: "Configure the image with a custom script that will execute on its first boot."
- Placeholder text: "Manually enter the script here."
- Helper text: "Supports bash shell, python or Ansible playbooks"

Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User requested to rename the kickstart section to better reflect its purpose as first boot configuration. Updated terminology from "kickstart CSV" to "script" to be more accurate about the supported file types. Helper text now clearly indicates support for multiple scripting languages instead of referring to CSV files.

=============================

CHANGE #12: Dropdown Toggle Behavior and Visual Checkmarks Implementation
Location: BuildImageModal.tsx - All dropdown/select components throughout the modal
Date: [Current Date]

Original Content: 
- Dropdown selections were permanent once made
- No visual indication of selected state within dropdown menus
- No way to deselect an option without changing to a different option

Current Content:
- All dropdowns now support toggle behavior: clicking the same option deselects it
- Blue checkmarks (CheckIcon) appear next to selected options in dropdown menus
- Toggle-off behavior returns dropdowns to appropriate default states:
  * Compliance dropdowns: clear selection and reset compliance type to empty
  * Integration dropdowns: clear selection and reset related fields
  * Optional dropdowns (timezone, etc.): clear to empty state
  * Required dropdowns (activation keys, base image): maintain selection behavior

Affected Components:
- Custom compliance policy dropdown
- OpenSCAP profile dropdown  
- AWS integration dropdown
- Timezone selection dropdown
- AWS regions dropdown
- Activation key dropdown (checkmarks only)
- Base image release dropdown (checkmarks only)
- Base image architecture dropdown (checkmarks only)

Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User requested consistent toggle behavior across all dropdowns with blue checkmarks for selected options. This improves UX by providing clear visual feedback and allowing users to easily deselect options. Required fields maintain selection to ensure form validity while optional fields can be cleared via toggle.

=============================

CHANGE #13: Double Checkmark Fix for Dropdown Components  
Location: BuildImageModal.tsx - All dropdown/select components throughout the modal
Date: [Current Date]

Original Content: 
- Custom CheckIcon implementations were added on top of PatternFly's native checkmarks
- This caused double checkmarks to appear in dropdown menus when options were selected
- Custom div layouts with flex styling were used to position checkmarks

Current Content:
- Removed all custom CheckIcon implementations and related styling divs
- Simplified SelectOption components to use plain text content only
- PatternFly v6 Select components now use their built-in checkmark functionality
- Single blue checkmarks appear correctly for selected options

Technical Changes:
- Removed CheckIcon import from react-icons
- Removed custom div containers with flex styling in SelectOption components
- Simplified all SelectOption children to plain text (e.g., {key}, {policy}, {region})
- Maintained toggle functionality while fixing visual duplication

Affected Components: All dropdown components maintain toggle behavior with proper single checkmarks

=============================

CHANGE #14: Cloud Image Expiration Notice
Location: BuildImageModal.tsx - Review tab (cloud environment expiration alert)
Date: [Current Date]

Original Content: [No cloud expiration notice existed]
Current Content: 
Alert Title: "Important: Cloud image expiration notice"
Alert Content:
"You are seeing this notice because you selected [Selected Cloud Provider Names] as your target environment(s).

The image will expire in 2 weeks after it's built. You must copy it to your own cloud account(s) to ensure continued access."

Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: Warning alert that appears in the Review tab when users select cloud environments. 

TRIGGER CONDITIONS: Alert displays when user selects any combination of:
- Amazon Web Services (AWS)
- Google Cloud Platform (GCP) 
- Microsoft Azure
- Oracle Cloud Infrastructure (OCI)

DYNAMIC BEHAVIOR:
- Cloud provider names are dynamically inserted based on user selections
- Text adjusts for singular/plural ("environment" vs "environments", "account" vs "accounts")
- Alert appears at the top of the Review tab to ensure visibility
- Page automatically scrolls to top when navigating to Review tab so users see the alert

PURPOSE: Critical warning to inform users about temporary nature of cloud images and requirement to copy to personal accounts before expiration.

=============================

CHANGE #15: Build Time Estimate Removal
Location: BuildImageModal.tsx - Review tab "Ready to build" alert
Date: [Current Date]

Original Content: 
"Your image configuration is complete and ready to build. The build process may take several minutes depending on the size and complexity of your image.

**Estimated build time:** 5-15 minutes"

Current Content:
"Your image configuration is complete and ready to build. The build process may take several minutes depending on the size and complexity of your image."

Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: Removed the specific build time estimate ("Estimated build time: 5-15 minutes") as it isn't relevant for this implementation. The general guidance about the build process taking "several minutes" is retained to set user expectations without providing specific time estimates that may not be accurate.

PURPOSE: Simplify messaging and remove potentially inaccurate time estimates while maintaining user awareness that builds take time.

=============================

CHANGE #16: Advanced Capabilities Checkboxes for Automatic Registration
Location: BuildImageModal.tsx - Base Image tab, Registration section under "Automatically register" option
Date: [Current Date]

Original Content: [No checkboxes under automatic registration option]
Current Content: Two checkboxes appear when "Automatically register and enable advanced capabilities" is selected:
1. "Enable predictive analytics and management capabilities" (checked by default)
2. "Enable remote remediations and system management with automation" (checked by default)

Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: Added two checkboxes underneath the automatic registration radio button to give users granular control over advanced capabilities. 

FUNCTIONALITY:
- Checkboxes only appear when "Automatically register and enable advanced capabilities" is selected
- Both checkboxes are checked by default to maintain current behavior expectations
- Users can uncheck individual capabilities if desired
- Checkboxes are indented (1.5rem left margin) to show hierarchical relationship
- Proper state management implemented for both checkbox values

PURPOSE: Provide users with more control over which advanced capabilities are enabled during automatic registration while maintaining clear visual hierarchy.

=============================

CHANGE #17: Activation Key Details Popover Content Updates
Location: BuildImageModal.tsx - Base Image tab, Activation key "View details" popover
Date: [Current Date]

Original Content: 
Labels and content:
- Key: {selectedActivationKey}
- Environment: Production  
- Usage: 45/100 systems
- Auto-attach: Enabled
- Content view: RHEL-8-CV

Current Content:
Labels and content:
- Name: {selectedActivationKey}
- Role: Development Environment
- SLA: Standard (Business Hours)
- Usage: 45/100 systems
- Additional repositories: EPEL, Red Hat Codeready Builder

Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: Updated the activation key details popover to show more relevant information with corrected labels and realistic content.

CHANGES MADE:
- "Key" → "Name" (maintains dynamic selectedActivationKey display)
- "Environment" → "Role" with updated content
- Added "SLA" field with service level information  
- Kept "Usage" field unchanged (45/100 systems)
- "Content view" → "Additional repositories" with repository names
- Removed "Auto-attach" field

PURPOSE: Provide more relevant and accurate information about activation keys that aligns with actual Red Hat subscription management terminology and user expectations.

=============================

CHANGE #18: Register Later Info Alert
Location: BuildImageModal.tsx - Base Image tab, Registration section under "Register later" option
Date: [Current Date]

Original Content: [No alert for register later option]
Current Content: Info alert that appears when "Register later" is selected:

Alert Title: "Register with Red Hat Insights within 30 days"
Alert Content:
"If you don't register your systems within 30 days, you will not be able to use Red Hat Insights capabilities.

[Learn more about registration (external link)]"

Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: Blue info alert that appears conditionally when user selects "Register later" registration option.

FUNCTIONALITY:
- Alert only displays when "Register later" radio button is selected
- Alert variant: info (blue background)
- Contains external link with ExternalLinkAltIcon
- Provides 30-day timeline guidance
- Warns about loss of Red Hat Insights capabilities

VISUAL DESIGN:
- Inline info alert with blue background
- Proper spacing (1rem margin top)
- External link styling with underline and icon
- Two-paragraph content structure

=============================

CHANGE #19: Base Image Form Validation Alerts
Location: BuildImageModal.tsx - Base Image tab inline validation alerts
Date: [Current Date]

Original Content: [No validation alerts on base image form]
Current Content: Inline warning alerts that appear above section titles when validation fails

VALIDATION CRITERIA:
1. Image name field must be filled out (required)
2. If "Enable repeatable build" is selected, snapshot date must be chosen (required)
3. Release and architecture have defaults so are less critical

VALIDATION TRIGGERS:
- Validation runs when user clicks "Review image" button while on Base Image tab (activeTabKey === 0)
- If validation fails, user stays on current tab and scrolls to top to see first error
- If validation passes, navigation to Review tab proceeds normally

ALERT BEHAVIOR:
- Warning alerts appear above the section title containing the error
- Alert title: "Please complete the required fields"
- Alert content shows specific error message
- Alerts automatically clear when user corrects the issue (starts typing or makes selection)

IMPLEMENTATION DETAILS:
- Uses existing validationErrors state system ({[key: string]: string})
- validateBaseImageForm() function returns boolean for success/failure
- Error clearing logic integrated with existing onChange handlers
- Maintains existing user experience for other tabs

=============================

CHANGE #20: Cloud Provider Login Validation
Location: BuildImageModal.tsx - Base Image tab, Image output section validation
Date: [Current Date]

Original Content: [No validation for cloud provider login status]
Current Content: Inline warning alert that appears when cloud providers are selected but login is incomplete

Alert Title: "Please sign in to your cloud accounts"
Alert Content: Dynamic messages based on which cloud providers need login:
- AWS: "Please sign in to your AWS account by selecting an integration"
- GCP: "Please select a GCP account type to proceed"
- Azure: "Please authorize your Microsoft Azure account"

VALIDATION CRITERIA:
1. AWS: Must select an integration (cannot remain on default empty selection)
2. GCP: Must select a service account type (cannot remain on default "Google account")
3. Azure: Must click "Authorize Azure" button to complete authorization
4. Oracle Cloud Infrastructure (OCI): No validation required (as indicated by tooltip)

VALIDATION TRIGGERS:
- Validation runs when user clicks "Review image" button while on Base Image tab
- Only validates cloud providers that are actually selected by the user
- If any selected cloud provider lacks proper authentication, validation fails
- User stays on current tab and sees warning alert above "Image output" section

ALERT BEHAVIOR:
- Warning alert appears above "Image output" section title
- Shows specific error message for each cloud provider requiring attention
- Multiple cloud provider errors can be displayed simultaneously
- Alerts automatically clear when user completes required actions

ERROR CLEARING LOGIC:
- AWS: Clears when user selects any integration option
- GCP: Clears when user selects any service account type (not "Google account")
- Azure: Clears when user clicks "Authorize Azure" button
- Real-time clearing provides immediate feedback to users

IMPLEMENTATION DETAILS:
- Integrates with existing validateBaseImageForm() function
- Uses existing validationErrors state system
- Maintains proper user experience flow
- Only validates selected cloud providers (doesn't block unused providers)

=============================

CHANGE #21: File System Configuration Section Addition
Location: BuildImageModal.tsx - Advanced Settings tab
Date: [Current Date]

Original Content: [No file system configuration section existed]
Current Content: New "File system configuration" section with:

Section Title: "File system configuration"
Description: "Configure how the file system should be partitioned for your image."

RADIO BUTTON OPTIONS:
1. "Use automatic partitioning" (default, marked as "Recommended")
2. "Manually configure partitions"

CONDITIONAL TABLE (appears only when "Manually configure partitions" is selected):
Table Title: "Configure partitions" 
Table Columns: Mount point | Suffix | Type | Minimum size | Unit | [Remove button]

DEFAULT TABLE ROW:
- Mount point: "/" (dropdown with options: /, /boot, /home, /var, /tmp)
- Suffix: [empty text input]
- Type: "xfs" (dropdown with options: xfs, ext4, ext3)
- Minimum size: "10" (text input)
- Unit: "GiB" (dropdown with options: GiB, MiB, TiB)
- Remove button only appears when multiple rows exist

TABLE FUNCTIONALITY:
- "Add partition" button (link style with plus icon) to add new rows
- Remove button (minus circle icon) to delete rows
- Users can customize all fields in each row
- Minimum one row requirement (remove button disabled on single row)

Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User requested file system configuration functionality similar to the packages and repositories step behaviorally, but only shows when "Manually configure partitions" is selected. 

BEHAVIORAL PATTERN:
- Follows same conditional visibility pattern as packages/repositories section
- Radio buttons control section visibility
- Table provides row-based management with add/remove functionality
- Integrates into Advanced Settings tab navigation flow
- Positioned after Firewall section, before Users section

TECHNICAL IMPLEMENTATION:
- Uses HTML table with PatternFly styling (since @patternfly/react-table not available)
- Proper state management for partitioning method and partition rows
- Section ref added for tab navigation functionality
- Consistent styling with other Advanced Settings sections
- Root mount point "/" is read-only and unchangeable in the first row
- Additional mount points can be selected from dropdown (/boot, /home, /var, /tmp)

=============================

CHANGE #22: Standardized Add Button Styling
Location: BuildImageModal.tsx - All Add buttons throughout modal
Date: [Current Date]

Original Content: Various Add buttons with inconsistent styling:
- "Add Repository" (secondary button variant)
- "Add more" (secondary button variant) - firewall section
- "Add another user" (secondary button variant)
- "Add partition" (already implemented with link + icon styling)

Current Content: All Add buttons now use consistent inline link styling:
- "Add Repository" (link variant with plus icon)
- "Add more" (link variant with plus icon) - firewall section
- "Add another user" (link variant with plus icon)
- "Add partition" (link variant with plus icon)

STANDARDIZED STYLING:
- Button variant: "link"
- Icon: PlusIcon from PatternFly react-icons
- Font size: 0.875rem for consistency
- Maintains existing margin/spacing per section needs

AFFECTED BUTTONS:
1. Repositories section: "Add Repository"
2. Firewall section: "Add more" 
3. Users section: "Add another user"
4. File system section: "Add partition"

Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User requested consistent styling for all Add buttons, specifically preferring the inline link styling with plus icon. This creates a cohesive experience across all add functionality throughout the modal while maintaining appropriate semantic meaning with the plus icon indicating addition of new items.

PURPOSE: Provide consistent visual design language for all add functionality throughout the application while maintaining usability and accessibility standards.

BUTTON STYLING FIX: Fixed locale section "Add more" button to use consistent styling (removed custom border/padding/color in favor of standard link + plus icon format).

=============================

CHANGE #23: Kernel Section "Add more" Button Fix and Enhancement
Location: BuildImageModal.tsx - Advanced Settings tab, Kernel section
Date: [Current Date]

Original Content: 
- Non-functional "Add more" button (missing onClick handler)
- Single kernel append text input using kernelAppend state
- Inconsistent button styling (secondary variant)
- No way to add multiple kernel arguments

Current Content:
- Fully functional "Add more" button with proper onClick handler
- Multiple kernel argument support using kernelArguments array state
- Standardized button styling (link variant with plus icon)
- Dynamic rows with individual remove functionality

FUNCTIONALITY IMPROVEMENTS:
1. **Working Add More Button**: Now properly connected to addKernelArgument() function
2. **Multiple Arguments Support**: Users can add unlimited kernel argument fields
3. **Remove Functionality**: Minus circle icons to remove individual arguments
4. **State Management**: Proper use of kernelArguments array instead of single kernelAppend string
5. **Standardized Styling**: Button now matches other Add buttons throughout modal

TECHNICAL CHANGES:
- Added addKernelArgument(), removeKernelArgument(), updateKernelArgument() helper functions
- Updated UI to use kernelArguments array with dynamic row generation
- Implemented remove icons with proper disabled state for single argument
- Migrated from kernelAppend (string) to kernelArguments (array) usage
- Applied consistent styling with other Add more buttons

VISUAL CONSISTENCY:
- Button variant: "link" with PlusIcon
- Font size: 0.875rem
- Matches firewall, users, and partition Add buttons
- Proper spacing and layout alignment

Suggested Content: [TO BE FILLED BY CONTENT WRITERS]
Notes: User reported that the kernel section "Add more" button was not working. Root cause was missing onClick handler and improper state management. Fixed by implementing proper multi-row functionality similar to firewall section pattern.

PURPOSE: Enable users to add multiple kernel boot parameters while maintaining consistent UX patterns across all sections of the modal.

=============================

CHANGE #24: Placeholder Text Documentation for Content Review
Location: BuildImageModal.tsx - Advanced Settings tab, multiple sections
Date: [Current Date]

PLACEHOLDER TEXT INSTANCES TO BE REPLACED:

1. COMPLIANCE SECTION
   - Location: Line ~2340
   - Section Header: "Compliance"
   - Current Content: "This is filler text for now."
   - Notes: Appears after main compliance description about Insights compliance policy and OpenSCAP profiles

2. LOCALE SECTION
   - Location: Line ~3260
   - Section Header: "Locale"
   - Current Content: "This is filler text for now."
   - Notes: Main description text for locale configuration section

3. HOSTNAME SECTION
   - Location: Line ~3421
   - Section Header: "Hostname"
   - Current Content: "This is filler text for now."
   - Notes: Main description text for hostname configuration section

4. KERNEL SECTION
   - Location: Line ~3486
   - Section Header: "Kernel"
   - Current Content: "This is filler text for now."
   - Notes: Main description text for kernel configuration section

5. SYSTEMD SERVICES SECTION
   - Location: Line ~3602
   - Section Header: "Systemd services"
   - Current Content: "This is filler text for now."
   - Notes: Main description text for systemd services management section

6. FIREWALL SECTION
   - Location: Line ~3671
   - Section Header: "Firewall"
   - Current Content: "This is filler text for now."
   - Notes: Main description text for firewall configuration section

PURPOSE: All instances marked for content writing team to replace with proper descriptive text explaining each section's functionality and purpose.

IMPLEMENTATION PRIORITY: Medium - these are section descriptions that help users understand what each configuration area does.

=============================

CHANGE #25: NTP Servers Validation Criteria Update
Location: BuildImageModal.tsx - Advanced Settings tab, Timezone section
Date: [Current Date]

Original Content: Three instances of "Additional kernel boot parameters to append"

Current Content:
1. "Must begin with a lowercase letter or digit"
2. "The address can only contain lowercase letters, digits or hyphens"
3. "Sections must be separated by a colon (:), period (.), or a forward slash (/)"

CONTEXT: These are validation criteria displayed below the NTP servers text input field in the Timezone section.

PURPOSE: Provide users with clear, specific validation rules for NTP server address formatting to prevent configuration errors and improve form usability.

IMPLEMENTATION: Updated three consecutive div elements with MinusIcon bullet points beneath the NTP servers FormGroup.

=============================

CHANGE #26: Hostname Validation Criteria Update
Location: BuildImageModal.tsx - Advanced Settings tab, Hostname section
Date: [Current Date]

Original Content: Three instances of "Additional kernel boot parameters to append"

Current Content:
1. "Each label must start and end with an alphanumeric character (a-z, 0-9)"
2. "Separate labels with dots"
3. "Hyphens are allowed within labels, but not at the beginning or end"

CONTEXT: These are validation criteria displayed below the hostname text input field in the Hostname section.

PURPOSE: Provide users with clear, specific validation rules for hostname formatting according to RFC standards, helping prevent configuration errors and improve form usability.

IMPLEMENTATION: Updated three consecutive div elements with MinusIcon bullet points beneath the hostname FormGroup.

=============================

CHANGE #27: Validation Criteria Width Expansion Fix
Location: BuildImageModal.tsx - Advanced Settings tab, NTP servers & Hostname sections
Date: [Current Date]

Original Issue: Validation criteria text was being truncated due to text input field width constraints (200px for NTP servers field)

Current Fix: Added explicit width styling to validation criteria containers:
- width: '100%' - Allow full available width
- maxWidth: '600px' - Set reasonable maximum to maintain readability

AFFECTED SECTIONS:
1. NTP Servers validation criteria (3 items)
2. Hostname validation criteria (3 items)

TECHNICAL IMPLEMENTATION: Updated all validation criteria div containers to include width and maxWidth properties, ensuring full sentence display without truncation.

RESULT: Users can now read complete validation criteria sentences without text being cut off by narrow text input field constraints.

=============================

CHANGE #28: Kernel Arguments Validation Criteria Update
Location: BuildImageModal.tsx - Advanced Settings tab, Kernel section
Date: [Current Date]

Original Content: Single instance of "Additional kernel boot parameters to append"

Current Content:
1. "Only alphanumeric characters, equals signs, hyphens, underscores, commas, periods, double quotes, and single quotes"
2. "Separate arguments with a comma"

CONTEXT: These are validation criteria displayed below the kernel arguments text input fields in the Kernel section's "Append" FormGroup.

PURPOSE: Provide users with clear, specific validation rules for kernel argument formatting, ensuring proper syntax and character usage for kernel boot parameters.

IMPLEMENTATION: Replaced single placeholder with two comprehensive validation criteria div elements, including width and maxWidth properties for full sentence display.

=============================

CHANGE #29: Firewall Port Validation Criteria Update
Location: BuildImageModal.tsx - Advanced Settings tab, Firewall section
Date: [Current Date]

Original Content: Two instances of "Additional kernel boot parameters to append"

Current Content:
1. "Must begin with a port number (up to 5 digits) or a lowercase name (up to 6 letters); a dash may be used to specify a range"
2. "Must include : or / followed by a lowercase protocol like tcp or udp"

CONTEXT: These are validation criteria displayed below the "Enabled ports" text input fields in the Firewall section.

PURPOSE: Provide users with clear, specific validation rules for firewall port configuration, ensuring proper port number/name format and protocol specification.

IMPLEMENTATION: Updated two placeholder validation criteria div elements with proper firewall port formatting rules, including width and maxWidth properties for full sentence display.

=============================

CHANGE #30: Systemd Services Placeholder and Helper Text Update
Location: BuildImageModal.tsx - Advanced Settings tab, Systemd services section
Date: [Current Date]

PLACEHOLDER TEXT CHANGES:
- Disabled services: "Enter services to disable" → "Comma-separated list of services to disable"
- Masked services: "Enter services to mask" → "Comma-separated list of services to mask"  
- Enabled services: "Enter services to enable" → "Comma-separated list of services to enable"

HELPER TEXT CHANGES:
- Disabled services: "Comma-separated list of services to disable" → "These services are installed but will not start automatically at boot."
- Masked services: "Comma-separated list of services to disable" → "These services are completely blocked from being started manually or automatically."
- Enabled services: "Comma-separated list of services to disable" → "These services are currently active and set to start automatically at boot."

CONTEXT: Updated all three systemd service fields to move format information to placeholder text and provide specific functional descriptions in helper text.

PURPOSE: Improve user understanding of different systemd service states and provide clearer input guidance by showing format requirements directly in the input fields.

IMPLEMENTATION: Updated TextInput placeholder attributes and helper text div content for all three service types (disabled, masked, enabled).

=============================

CHANGE #31: RHEL Version Support Lifecycle Details in Dropdown Menus
Location: BuildImageModal.tsx (Base Image tab), Dashboard.tsx (Migration overlay), ImageMigrationModal.tsx
Date: [Current Date]

ENHANCEMENT: Added detailed support lifecycle information to all RHEL version dropdown menus

CONTENT DETAILS:
- Red Hat Enterprise Linux 10: "Full support ends: May 2030 | Maintenance support ends: May 2035"
- Red Hat Enterprise Linux 9: "Full support ends: May 2027 | Maintenance support ends: May 2032"
- Red Hat Enterprise Linux 8: "Full support ends: May 2024 | Maintenance support ends: May 2029"

LOCATIONS UPDATED:
1. BuildImageModal.tsx - Base Image Release dropdown
2. Dashboard.tsx - Migration overlay "To" release dropdown
3. ImageMigrationModal.tsx - Migration target release dropdown

CONTEXT: Enhanced all RHEL version selection dropdowns to display support lifecycle information, matching the design shown in user mockups and providing critical support expiration dates.

PURPOSE: Help users make informed decisions about RHEL version selection by showing full support and maintenance support end dates directly in the dropdown options.

IMPLEMENTATION: Structured SelectOption content with main release name (fontWeight: 500) and support detail information below in smaller, lighter text (fontSize: '0.875rem', color: '#666').

VISUAL IMPACT: Each dropdown option now displays both the RHEL version name and its support lifecycle dates in a clear two-line format, improving user awareness of support timelines.

=============================

CHANGE #32: User Validation - Duplicate Username Prevention
Location: BuildImageModal.tsx - Advanced Settings tab, Users section
Date: [Current Date]

VALIDATION ENHANCEMENT: Implemented username duplicate validation with real-time feedback

VALIDATION RULES:
- Only requirement: Duplicate usernames are not allowed
- Real-time validation as users type
- Error clearing when duplicates are resolved

HELPER TEXT UPDATE:
- Original: "Create user accounts for systems that will use this image."
- Updated: "Create user accounts for systems that will use this image. Duplicate usernames are not allowed."

UI IMPLEMENTATION:
- Added `checkDuplicateUsername()` function to detect duplicate usernames across all users
- Added `usernameErrors` state to track validation errors per user
- Enhanced username TextInput with:
  - Real-time duplicate checking on onChange
  - Visual error state (`validated="error"`)
  - Error message display below input field
  - Smart error clearing when duplicates are resolved
- Added cleanup of username validation errors when users are removed

CONTEXT: Simplified user validation to focus solely on preventing duplicate usernames, removing any other validation complexity while providing immediate feedback to users.

PURPOSE: Ensure unique usernames across all user accounts while maintaining a streamlined user experience with clear validation feedback.

ERROR HANDLING: 
- Real-time validation prevents submission with duplicates
- Error messages appear immediately when duplicates are detected
- Errors automatically clear when duplicates are resolved
- Validation state cleanup when users are removed

[Future changes will be added below this line] 

=============================

CHANGE #33: Validation Error Navigation Enhancement
Location: BuildImageModal.tsx - "Review image" button validation behavior
Date: [Current Date]

UX Enhancement: Smart Error Navigation with Automatic Scrolling
Current Behavior: When validation fails on "Review image", shows error message and scrolls to top of modal
New Behavior: When validation fails, automatically scrolls to the first error field location

Implementation Details:
- Enhanced validateBaseImageForm() function to return first error field reference
- Added imageDetailsRef for Image Details section navigation
- Updated "Review image" button onClick handler to scroll to specific error locations
- Uses smooth scrolling animation to guide user attention

Error Navigation Priority:
1. Image name errors → scrolls to Image Details section
2. Snapshot date errors → scrolls to Enable Repeatable Build section  
3. Cloud provider login errors → scrolls to Image Output section

Benefits:
- Eliminates user frustration from hunting for validation errors
- Provides immediate visual feedback on what needs to be completed
- Improves form completion workflow efficiency
- Maintains consistent validation message display

Technical Implementation:
- Uses React refs for precise section targeting
- Calculates scroll position relative to modal container
- Preserves existing validation error display logic
- Maintains backward compatibility with existing behavior

CONTEXT: Addresses user request to automatically navigate to the first validation error field instead of requiring manual searching through the wizard steps.

PURPOSE: Improve form validation UX by providing immediate, targeted navigation to incomplete or invalid fields.

ERROR HANDLING: 
- Smooth scroll animation guides user attention to problem areas
- Fallback behavior if refs are not available
- Maintains existing validation message display
- Works consistently across all validation error types

=============================

**CHANGE #34: Repository and Package Table Browser Interface**

**Location**: `BuildImageModal.tsx` - Base Image tab, Repositories and Packages section

**Summary**: Comprehensive package discovery interface with hierarchical repository browsing, per-repository search, pagination, and selected packages summary table for large datasets.

**Implementation Details**:
- **Interface Toggle**: "Search & Add" vs "Browse Table" modes
- **Repository Search**: Global search to filter repositories by name and description
- **Per-Repository Package Search**: Individual search fields within each expanded repository
- **Pagination**: 50 packages per page with Previous/Next controls
- **Selected Packages Summary Table**: Displays all selected packages with repository information
- **Performance Optimization**: Designed to handle up to 25,000 packages per repository

**Technical Features**:
- **State Management**: 
  - `packageInterfaceMode`: Toggle between 'search' and 'browse' modes
  - `expandedRepositories`: Set of expanded repository IDs
  - `repositorySearchTerm`: Global repository filter
  - `repositoryPackageSearchTerms`: Object mapping repository IDs to search terms
  - `repositoryPagination`: Object mapping repository IDs to current page numbers

- **Helper Functions**:
  - `getFilteredPackagesForRepository()`: Returns `{packages, totalCount, hasMore}` with pagination
  - `updateRepositoryPackageSearch()`: Updates search term and resets pagination
  - `updateRepositoryPagination()`: Updates page number for specific repository
  - `getRepositoryNameById()`: Retrieves repository name from ID for package summary table

**UX Enhancements**:
- **Repository Level**: Click to expand/collapse, shows package count
- **Package Level**: Search within expanded repositories, checkbox selection, detailed package info
- **Navigation**: Page indicators, Previous/Next buttons, result counts
- **Selected Packages Table**: Clear overview of all selected packages with repository source
- **Visual Design**: Hierarchical indentation, hover states, clear section separation

**Selected Packages Summary Table**:
- **Columns**: Package Name, Repository, Version, Support End, Remove Action
- **Features**: 
  - Shows package name with version
  - Repository source for each package
  - Support end date information
  - Individual remove buttons with MinusCircleIcon
  - Hover effects and professional table styling
  - Conditional display (only shows when packages are selected)
  - Package count in header
- **Functionality**:
  - Remove packages individually from summary table
  - Works across both search and browse interface modes
  - Real-time updates when packages are added/removed
  - Maintains package-to-repository mapping

**Data Structure**:
```typescript
repositoryData = [
  {
    id: 'repository-id',
    name: 'Repository Name', 
    description: 'Repository description',
    packageCount: 2847,
    packages: [
      {
        id: 'package-id',
        name: 'package-name',
        version: '1.0.0',
        description: 'Package description',
        applicationStream: 'RHEL 9',
        retirementDate: '2032-05-31'
      }
    ]
  }
]
```

**Search Functionality**:
- **Repository Search**: Filters repositories by name/description only
- **Package Search**: Per-repository search by package name/description
- **Pagination**: 50 packages per page with intelligent result management
- **Result Indicators**: Clear feedback on search results and pagination status

**Performance Considerations**:
- Search result limiting (50 packages default, 100 max search results previously)
- Per-repository pagination to handle large datasets
- Efficient state management with targeted updates
- Lazy loading approach with expandable repository structure

This interface provides a scalable solution for package discovery in enterprise environments with thousands of repositories and tens of thousands of packages, while maintaining clear visibility of selected packages and their sources.

=============================

CHANGE #36: Enhanced Package Discovery Interface
Location: BuildImageModal.tsx - Repositories and Packages section
Date: [Current Date]

SUMMARY: Comprehensive enhancement of the package discovery interface with multi-selection, repository insights integration, package count display, Lightspeed recommendations, and improved user experience.

MAJOR ENHANCEMENTS:

1. **Repository Source Information**:
   - Added informational banner explaining repositories are sourced from Red Hat Insights account
   - Includes external link to https://console.redhat.com/insights/content/repositories with external link icon
   - Blue info styling with InfoCircleIcon for better visibility

2. **Package Type Selector Enhancement**:
   - Maintained existing "Individual packages" and "Package groups" options
   - Ready for future package groups implementation

3. **"Add All Packages" Default State**:
   - When repository is selected but no search term entered, shows prominent "Add all packages from [Repository]" option
   - Displays repository package count (e.g., "2,847 packages available")
   - Includes instructional text "Or search for specific packages below:"
   - Mock package counts for different repositories (Red Hat BaseOS: 2,847, EPEL: 15,420, etc.)

4. **Multi-Package Selection with Labels**:
   - Selected packages now display as blue chips/labels above the search input
   - Each label shows package name or "All packages (count)" for bulk selections
   - Individual remove buttons (TimesIcon) on each label for granular control
   - Labels support text overflow with ellipsis for long package names
   - Search placeholder updates to "Search for more packages..." when packages already selected

5. **Lightspeed Package Recommender**:
   - Triggered automatically after package selection
   - Shows "Lightspeed recommends" section with star icons
   - Displays "Popular pairings with [selected package]" context
   - Golden/amber color scheme (#d97706, #fff7e6) to distinguish from regular results
   - Mock recommendations for popular packages (httpd → mod_ssl, php, mariadb-server)
   - Hover effects and click-to-add functionality

6. **Enhanced User Experience**:
   - Package search input remains active for continued selections (not locked after first selection)
   - Dynamic placeholder text based on selection state
   - Improved dropdown height (300px) to accommodate new sections
   - Repository package counts automatically assigned when repository selected
   - Seamless integration between single and multi-selection modes

TECHNICAL IMPLEMENTATION:
- Enhanced RepositoryRow interface with selectedPackages[], repositoryPackageCount, lastSelectedPackage, lightspeedRecommendations
- Added handleAddAllPackages() function for bulk package selection
- Added handleRemovePackageFromSelection() for granular removal
- Added generateLightspeedRecommendations() with smart package pairing logic
- Enhanced handlePackageSelection() to support multi-selection mode
- Mock repository data with realistic package counts for demonstration

MOCK DATA EXAMPLES:
- Red Hat Enterprise Linux BaseOS: 2,847 packages
- Red Hat Enterprise Linux AppStream: 4,521 packages  
- EPEL: 15,420 packages
- Custom Repository: 342 packages

LIGHTSPEED RECOMMENDATIONS:
- httpd → mod_ssl, php, mariadb-server
- mysql → mysql-connector, php-mysql, phpmyadmin
- nginx → nginx-mod-http-ssl, certbot, nginx-mod-http-geoip

PURPOSE: Create a sophisticated package discovery experience that scales from individual package selection to bulk operations, provides intelligent recommendations, and integrates with Red Hat Insights ecosystem for enterprise users.

USER WORKFLOW:
1. User selects repository → sees package count and "add all" option
2. User can bulk-add all packages or search for specific ones
3. Selected packages appear as removable labels
4. Lightspeed shows intelligent recommendations based on selections
5. User can continue adding more packages with persistent search functionality

STATUS: ✅ COMPLETED - All enhancements implemented and server running successfully

=============================

CHANGE #37: Package Discovery Interface Refinements  
Location: BuildImageModal.tsx - Repositories and Packages section
Date: [Current Date]

REFINEMENTS: Enhanced user experience with improved search behavior and streamlined interface design.

IMPROVEMENTS MADE:

1. **Simplified Repository Source Information**:
   - Removed separate info banner section
   - Integrated repository source information directly into main description text
   - Maintains external link to Red Hat Insights Repositories with external link icon
   - Cleaner, less cluttered interface design

2. **Smart Search Input Management**:
   - **"All packages" selections**: Search input completely hidden when "All packages from [Repository]" is selected
   - **Individual package selections**: Search input shows placeholder text with last selected package name
   - **Locked rows with selections**: Search input hidden after "Add Repository" is clicked (row becomes locked)
   - **PatternFly Limitation**: SearchInput component doesn't support chips/labels inside the input field natively

3. **Enhanced Placeholder Text**:
   - Default state: "Search for packages..." or "Select repository first"
   - With selections: "Last selected: [package name] | Search for more..."
   - Provides visual feedback about last selection without requiring chips inside input

4. **Improved Search Dropdown Logic**:
   - Dropdown hidden for "all packages" selections (no further search needed)
   - Dropdown hidden for locked rows with existing selections
   - Prevents unnecessary search interfaces when selections are complete

5. **Add Repository Workflow**:
   - When "Add Repository" is clicked, current row becomes locked
   - Search input disappears for completed rows
   - New row appears for additional selections
   - Clear visual separation between completed and active rows

TECHNICAL IMPLEMENTATION:
- Enhanced search input visibility conditions: `!row.selectedPackages?.some(pkg => pkg.isAllPackages) && !(row.isLocked && (row.selectedPackages?.length ?? 0) > 0)`
- Integrated placeholder text logic to show last selected package information
- Maintained consistent dropdown behavior with search input visibility
- Preserved existing locking mechanism from addRepositoryRow function

PATTERNFLY LIMITATION ADDRESSED:
- PatternFly SearchInput doesn't support tokenized input with chips inside the field
- Implemented workaround using enhanced placeholder text to show last selection
- Alternative approach maintains functionality while working within component constraints

USER WORKFLOW:
1. User selects repository → sees package count options
2. For "All packages" → search input disappears (complete)
3. For individual packages → last selection shows in placeholder, can continue searching
4. Click "Add Repository" → current row locks, search disappears, new row appears
5. Clear visual feedback of completion status for each row

PURPOSE: Streamline the package discovery experience by hiding unnecessary search interfaces when selections are complete, while providing clear feedback about current selections within PatternFly component limitations.

STATUS: ✅ COMPLETED - Enhanced search behavior and interface refinements implemented successfully

=============================

CHANGE #38: OpenSCAP Package Search Dropdown Fix
Location: BuildImageModal.tsx - OpenSCAP required packages (aide, sudo)
Date: [Current Date]

BUG FIX: Resolved persistent search dropdowns appearing for OpenSCAP-required packages that should be locked and non-searchable.

ROOT CAUSE:
- OpenSCAP required packages had `packageSearchTerm` values set to 'aide' and 'sudo'
- These non-empty search terms triggered the search dropdown visibility condition
- Search dropdown and input were not properly excluding OpenSCAP required rows

FIXES IMPLEMENTED:

1. **Search Input Visibility**:
   - Added `!row.isOpenSCAPRequired` condition to search input visibility check
   - OpenSCAP required packages no longer show search input field

2. **Search Dropdown Visibility**:
   - Added `!row.isOpenSCAPRequired` condition to search dropdown visibility check  
   - Prevents search dropdowns from appearing for OpenSCAP packages

3. **Package Search Term Cleanup**:
   - Cleared `packageSearchTerm` for OpenSCAP packages from 'aide'/'sudo' to empty strings
   - Eliminates the trigger that was causing persistent dropdowns

TECHNICAL CHANGES:
```typescript
// Before: Search input/dropdown would show for OpenSCAP packages
{!row.selectedPackages?.some(pkg => pkg.isAllPackages) && ...}

// After: OpenSCAP packages excluded from search functionality  
{!row.isOpenSCAPRequired && !row.selectedPackages?.some(pkg => pkg.isAllPackages) && ...}

// OpenSCAP package data cleaned up:
packageSearchTerm: '', // Previously: 'aide' or 'sudo'
```

RESULT: 
- OpenSCAP required packages (aide v0.16, sudo v1.9.5p2) now display cleanly as locked, read-only selections
- No persistent "Click the arrow or press Enter to search" dropdowns  
- Search functionality properly limited to user-selectable packages only
- Maintains "Added by OpenSCAP" helper text for clear identification

STATUS: ✅ COMPLETED - OpenSCAP package search dropdown issue resolved

=============================

CHANGE #39: Individual Package Selection and UI Alignment Fixes
Location: BuildImageModal.tsx - Package discovery interface
Date: [Current Date]

CRITICAL FIXES: Resolved multiple issues with individual package selection behavior, UI alignment, and search functionality.

ISSUES ADDRESSED:

1. **Individual Package Selection Bug** ❌→✅:
   - **Problem**: Selecting individual packages (like "bash") was incorrectly locking the row like "All packages"
   - **Root Cause**: `handlePackageSelection()` was setting `isLocked: true` for ALL package selections
   - **Fix**: Only lock rows for OpenSCAP required packages, not individual user selections

2. **Continued Search Prevention** ❌→✅:
   - **Problem**: After selecting one package, users couldn't search for more packages from the same repository
   - **Fix**: Individual package selections no longer lock the row, allowing continued search

3. **Minus Icon Alignment** ❌→✅:
   - **Problem**: Minus icon wasn't consistently positioned at far right of package column
   - **Fix**: Restructured layout with dedicated flex containers to ensure icon stays at far right

4. **Unnecessary Subtext Removal** ❌→✅:
   - **Problem**: "Repository selected" subtext appeared for all locked rows
   - **Fix**: Removed this subtext entirely - only OpenSCAP packages show "Added by OpenSCAP"

TECHNICAL IMPLEMENTATION:

**Updated handlePackageSelection():**
```typescript
// Before: Always locked individual selections
isLocked: true,
packageSearchTerm: pkg.name,

// After: Only lock OpenSCAP, allow continued search for individual packages
isLocked: row.isOpenSCAPRequired, // Only lock OpenSCAP packages
packageSearchTerm: '', // Clear search term to allow continued search
```

**Improved Layout Structure:**
```jsx
// New container structure for proper alignment
<div style={{ display: 'flex', alignItems: 'center', gap: '8px', width: '100%' }}>
  {/* Input container - flex: 1 */}
  <div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>
    {/* Search input or read-only input here */}
  </div>
  
  {/* Minus icon - always far right with flexShrink: 0 */}
  <MinusCircleIcon style={{ flexShrink: 0 }} />
</div>
```

**Updated Search Visibility Logic:**
```typescript
// Simplified conditions - removed locked row exclusion for individual packages
{!row.isOpenSCAPRequired && !row.selectedPackages?.some(pkg => pkg.isAllPackages) && (...)}
```

USER WORKFLOW IMPROVEMENTS:

1. **Multi-Package Selection from Same Repository** ✅:
   - Select "Red Hat" repository → Search "bash" → Select it
   - Search field remains active: "Last selected: bash | Search for more..."  
   - Continue searching: "httpd", "nginx", etc. from same repository
   - Each selection adds package chip/label above search field

2. **"All Packages" vs Individual Packages** ✅:
   - **All packages**: Search input disappears (complete selection)
   - **Individual packages**: Search input stays active for more selections

3. **Consistent UI Alignment** ✅:
   - Minus icon always positioned at far right of package column
   - Proper spacing maintained regardless of input field visibility

4. **Clear Visual Hierarchy** ✅:
   - OpenSCAP packages: Locked with "Added by OpenSCAP" text
   - User packages: Active search with package chips, minus icon at right
   - All packages: Clean locked state with package count chip

TESTING SCENARIOS:
- ✅ Select "bash" → Can continue searching for more packages
- ✅ Select "All packages" → Search input disappears  
- ✅ Minus icon stays at far right in all states
- ✅ No "Repository selected" subtext for user selections
- ✅ Multi-package selection works from same repository
- ✅ OpenSCAP packages remain locked and unchangeable

STATUS: ✅ COMPLETED - Individual package selection workflow fully functional with proper UI alignment

=============================

CHANGE #40: Lightspeed Recommender UI Enhancement and Auto-Scroll
Location: BuildImageModal.tsx - Package discovery dropdown, Lightspeed recommendations
Date: [Current Date]

ENHANCEMENTS: Improved Lightspeed package recommender design and added auto-scroll functionality for better user experience.

IMPROVEMENTS MADE:

1. **PatternFly Magic Wand Icon** ⭐→🪄:
   - **Replaced**: Custom star SVG icons with PatternFly's official `MagicIcon`
   - **Result**: More consistent, recognizable magic wand icons for Lightspeed recommendations
   - **Technical**: Added `MagicIcon` import from `@patternfly/react-icons`

2. **Streamlined Lightspeed Section**:
   - **Removed**: Separate "Lightspeed recommends" header section with description
   - **Result**: Cleaner, more integrated appearance within search results
   - **Maintained**: Golden/amber color scheme (#fff7e6, #d97706) to distinguish recommendations
   - **Visual Separation**: Added subtle separator line above recommendations

3. **Limited to Top 2 Recommendations** 📊:
   - **Changed**: `.slice(0, 2)` to show only the 2 most popular recommendations  
   - **Rationale**: Prevents overwhelming users while highlighting best suggestions
   - **Maintained**: Click-to-add functionality and hover effects

4. **Auto-Scroll Functionality** 📜:
   - **Repository Selection**: Auto-scrolls to center package field when repository selected
   - **Search Execution**: Scrolls to ensure dropdown visibility when search is performed  
   - **Smart Positioning**: Additional scroll if element is in bottom third of viewport
   - **Smooth Animation**: Uses `scrollIntoView()` with smooth behavior

TECHNICAL IMPLEMENTATION:

**Icon Replacement:**
```jsx
// Before: Custom star SVG
<svg width="14" height="14" viewBox="0 0 24 24" fill="#d97706">
  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88..."/>
</svg>

// After: PatternFly magic wand icon
<MagicIcon style={{ fontSize: '14px', color: '#d97706' }} />
```

**Streamlined Recommendations Structure:**
```jsx
// Removed header section, added simple separator
<div style={{ borderTop: '1px solid #e8e8e8', margin: '8px 0' }} />

// Top 2 recommendations only with magic wand icons
{row.lightspeedRecommendations.slice(0, 2).map((rec) => (
  <div>
    <MagicIcon style={{ fontSize: '14px', color: '#d97706' }} />
    {rec.name}
  </div>
))}
```

**Auto-Scroll Implementation:**
```javascript
// Repository selection scroll
setTimeout(() => {
  const element = document.getElementById(`package-${rowId}`);
  if (element) {
    element.scrollIntoView({ 
      behavior: 'smooth', 
      block: 'center',
      inline: 'nearest'
    });
  }
}, 300);

// Search results scroll with viewport awareness
const rect = element.getBoundingClientRect();
const windowHeight = window.innerHeight;
if (rect.top > windowHeight * 0.66) {
  element.scrollIntoView({ behavior: 'smooth', block: 'start' });
}
```

USER EXPERIENCE IMPROVEMENTS:

1. **Better Visual Recognition** ✅:
   - Magic wand icons clearly indicate AI-powered recommendations
   - Consistent with PatternFly design system
   - Professional appearance with proper iconography

2. **Cleaner Interface** ✅:
   - No redundant header text cluttering the dropdown
   - Recommendations blend naturally with search results
   - Visual separation through background color and separator line

3. **Focused Recommendations** ✅:
   - Only 2 top recommendations prevent choice overload
   - Quality over quantity approach
   - Still maintains full functionality for selection

4. **Improved Navigation** ✅:
   - Auto-scroll ensures users can always see dropdown options
   - Smooth animations provide polished experience
   - Smart positioning prevents UI from being cut off

TESTING SCENARIOS:
- ✅ Magic wand icons appear correctly for Lightspeed recommendations
- ✅ Only top 2 recommendations show (e.g., for httpd: mod_ssl, php)
- ✅ Auto-scroll works when selecting repository
- ✅ Auto-scroll works when performing package search
- ✅ Dropdown remains fully visible even on smaller viewports
- ✅ Recommendations maintain golden color scheme and hover effects

STATUS: ✅ COMPLETED - Lightspeed recommender enhanced with PatternFly icons and auto-scroll functionality

=============================

CHANGE #41: Collapsible Extended Support Subscription for Better Dropdown Visibility
Location: BuildImageModal.tsx - Repositories and Packages tab, Extended support subscription section
Date: [Current Date]

ISSUE RESOLUTION: Fixed dropdown visibility problem where package search dropdowns were getting cut off by viewport due to Extended support subscription section taking up valuable vertical space.

**Problem**: Users couldn't see the full package search dropdown (with "Add all packages" option and Lightspeed recommendations) without manually scrolling down, because the Extended support subscription section was pushing the package table lower on the page.

SOLUTION IMPLEMENTED:

1. **Collapsible by Default** 📁:
   - Extended support subscription section now starts collapsed (reduces vertical space)
   - Only shows a compact header line with chevron arrow
   - Gives maximum room for package dropdown visibility

2. **Interactive Toggle** 🔄:
   - **Clickable header** with chevron icons (ChevronRightIcon/ChevronDownIcon)
   - **Smooth expansion/collapse** with proper spacing adjustments
   - **Visual feedback** with cursor pointer and hover states

3. **Status Indicator When Collapsed** 📊:
   - Shows current selection status inline: "(EUS enabled)" or "(EEUS enabled)"
   - Only appears when non-"none" option is selected
   - Allows users to see status without expanding section

4. **Preserved Functionality** ✅:
   - All radio button options remain fully functional when expanded
   - State management unchanged (extendedSupport values preserved)
   - Proper indentation (1.5rem) when expanded for clear hierarchy

TECHNICAL IMPLEMENTATION:

**New State Variable:**
```typescript
const [isExtendedSupportCollapsed, setIsExtendedSupportCollapsed] = React.useState<boolean>(true);
```

**Collapsible Header:**
```jsx
<div
  style={{ cursor: 'pointer', display: 'flex', alignItems: 'center' }}
  onClick={() => setIsExtendedSupportCollapsed(!isExtendedSupportCollapsed)}
>
  {isExtendedSupportCollapsed ? <ChevronRightIcon /> : <ChevronDownIcon />}
  <span>Extended support subscription</span>
  {/* Status indicator when collapsed */}
  {isExtendedSupportCollapsed && extendedSupport !== 'none' && (
    <span>({extendedSupport === 'eus' ? 'EUS enabled' : 'EEUS enabled'})</span>
  )}
</div>
```

**Conditional Content:**
```jsx
{!isExtendedSupportCollapsed && (
  <div style={{ marginLeft: '1.5rem' }}>
    {/* Radio buttons here */}
  </div>
)}
```

USER EXPERIENCE IMPROVEMENTS:

1. **Better Dropdown Visibility** ✅:
   - Package search dropdowns now have sufficient vertical space
   - Users can see full "Add all packages" options and Lightspeed recommendations
   - No manual scrolling required to view dropdown contents

2. **Space Efficiency** ✅:
   - Collapsed section saves ~80px of vertical space
   - Package table appears higher on screen
   - More content fits in viewport without scrolling

3. **Intuitive Interaction** ✅:
   - Clear visual cues (chevron arrows) indicate expandable content
   - Status indicator shows current setting without expanding
   - Maintains familiar collapsible pattern used throughout application

4. **Progressive Disclosure** ✅:
   - Advanced options (Extended support) hidden by default
   - Core workflow (package selection) prioritized with maximum screen real estate
   - Easy access to extended options when needed

TESTING SCENARIOS:
- ✅ Extended support section starts collapsed with right-pointing chevron
- ✅ Clicking header expands section with down-pointing chevron  
- ✅ Radio button selection works normally when expanded
- ✅ Status indicator shows "(EUS enabled)" when EUS is selected and section collapsed
- ✅ Package dropdowns now fully visible without manual scrolling
- ✅ Auto-scroll functionality still works for search results
- ✅ Lightspeed recommendations visible within viewport
- ✅ State preserved when toggling collapse/expand

VISUAL DESIGN:
- **Collapsed**: Compact one-line header with status indicator
- **Expanded**: Full radio button options with proper indentation  
- **Consistent**: Matches existing collapsible patterns in application
- **Accessible**: Proper click targets and visual feedback

STATUS: ✅ COMPLETED - Extended support subscription now collapsible, providing better dropdown visibility and improved user experience

=============================

CHANGE #42: Consistent Modal Height Across All Tabs
Location: BuildImageModal.tsx - Modal component and tab content wrappers
Date: [Current Date]

ISSUE RESOLUTION: Fixed inconsistent modal height between "Repositories and packages" tab and other tabs to provide a smooth, consistent user experience when switching between tabs.

**Problem**: Modal height was changing when switching between tabs, with the "Repositories and packages" tab appearing to have different height than "Base image" and "Advanced settings" tabs.

SOLUTION IMPLEMENTED:

1. **Enhanced Modal Height Constraints** 📏:
   - **Added explicit style constraints**: `minHeight: '80vh', maxHeight: '80vh'`
   - **Prevents auto-resizing**: Modal maintains consistent 80vh height regardless of content
   - **Forced height consistency**: `style={{ height: '80vh', minHeight: '80vh', maxHeight: '80vh' }}`

2. **Consistent Tab Content Wrappers** 🎯:
   - **Applied to all 4 tabs**: Base image, Repositories and packages, Advanced settings, Review image
   - **Flex layout**: `display: 'flex', flexDirection: 'column'`
   - **Full height**: `height: '100%'` ensures content area fills available space
   - **Proper overflow handling**: Content scrolls within fixed modal height

3. **Unified Content Structure** ⚖️:
   - **Base image tab**: `<div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>`
   - **Repositories and packages tab**: Same styling applied
   - **Advanced settings tab**: Same styling applied  
   - **Review image tab**: Same styling applied

TECHNICAL IMPLEMENTATION:

**Modal Height Enforcement:**
```jsx
<Modal
  variant={ModalVariant.large}
  title="Register systems using this image"
  isOpen={isOpen}
  onClose={onClose}
  width="min(1400px, 95vw)"
  height="80vh"
  style={{ height: '80vh', minHeight: '80vh', maxHeight: '80vh' }}
>
```

**Consistent Tab Wrappers:**
```jsx
// Applied to all 4 cases in renderTabContent()
case 0: // Base image
case 1: // Repositories and packages  
case 2: // Advanced settings
case 3: // Review image
  return (
    <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
      {/* Tab content */}
    </div>
  );
```

**Content Area Structure:**
```jsx
<div 
  ref={contentAreaRef}
  style={{ 
    flex: 1,           // Takes remaining space
    minHeight: 0,      // Allows flex shrinking
    padding: '24px 24px 24px 32px',
    overflowY: 'auto', // Content scrolls when needed
    overflowX: 'hidden'
  }}>
  {renderTabContent()}  // Now with consistent height wrappers
</div>
```

USER EXPERIENCE IMPROVEMENTS:

1. **Seamless Tab Switching** ✅:
   - No jarring height changes when switching between tabs
   - Modal maintains consistent 80vh height across all tabs
   - Smooth transition between different content types

2. **Proper Content Scrolling** ✅:
   - Long content (like Advanced settings) scrolls within fixed modal height
   - Package dropdowns remain properly positioned
   - No content gets cut off or causes modal expansion

3. **Visual Stability** ✅:
   - Modal position stays consistent on screen
   - Footer buttons remain in same location
   - Header and tabs maintain fixed positions

4. **Responsive Behavior** ✅:
   - 80vh height scales properly on different screen sizes
   - Content area adapts to available space within constraints
   - Overflow handled gracefully with internal scrolling

TESTING SCENARIOS:
- ✅ Switch from "Base image" to "Repositories and packages" → No height change
- ✅ Switch from "Repositories and packages" to "Advanced settings" → No height change  
- ✅ Switch from "Advanced settings" to "Review image" → No height change
- ✅ Package dropdowns remain fully visible with proper positioning
- ✅ Long form content scrolls within modal without changing modal size
- ✅ Modal height remains 80vh on different viewport sizes

BROWSER COMPATIBILITY:
- ✅ Consistent height behavior across modern browsers
- ✅ Flex layout support ensures proper content distribution
- ✅ Viewport height units (vh) work reliably for responsive sizing

STATUS: ✅ COMPLETED - Modal height now consistent across all tabs, providing seamless user experience

=============================

CHANGE #43: Revert Modal Dimensions and Remove "Add New Repository" Feature
Location: BuildImageModal.tsx - Modal component and repository dropdown
Date: [Current Date]

REVISIONS: Removed unwanted "Add new repository" feature and restored original modal dimensions that worked well for "Base image" tab.

**Issues Addressed:**
1. **"Add new repository" feature** was unnecessary and cluttering the dropdown interface
2. **Fixed modal height constraints** made the modal "super small" compared to the original "Base image" dimensions

CHANGES IMPLEMENTED:

1. **Removed "Add New Repository" Feature** ❌:
   - **Eliminated dropdown option**: "Add new repository: [search term]" no longer appears
   - **Cleaner interface**: Repository dropdown now only shows existing repositories
   - **Reduced complexity**: No custom repository creation workflow
   
   **Removed Code:**
   ```jsx
   {!row.isOpenSCAPRequired && row.isRepositorySearching && row.repositorySearchTerm && 
    !getFilteredRepositories(row.repositorySearchTerm).some(repo => 
      repo.toLowerCase() === row.repositorySearchTerm.toLowerCase()
    ) && (
     <div onClick={() => handleRepositorySearchSelect(row.id, row.repositorySearchTerm)}>
       Add new repository: "{row.repositorySearchTerm}"
     </div>
   )}
   ```

2. **Reverted Modal Height Constraints** 📏:
   - **Removed fixed height**: No more `height="80vh"` or style constraints
   - **Natural sizing**: Modal now auto-sizes based on content like original "Base image"
   - **Removed flex constraints**: Tab content containers back to simple `<div>` elements

   **Before (Fixed Height):**
   ```jsx
   <Modal
     width="min(1400px, 95vw)"
     height="80vh"
     style={{ height: '80vh', minHeight: '80vh', maxHeight: '80vh' }}
   >
   ```

   **After (Natural Height):**
   ```jsx
   <Modal
     width="min(1400px, 95vw)"
   >
   ```

3. **Reverted Tab Content Wrappers** 🔄:
   - **All 4 tabs reverted**: Base image, Repositories and packages, Advanced settings, Review image
   - **Removed flex styling**: No more `height: '100%', display: 'flex', flexDirection: 'column'`
   - **Back to original**: Simple `<div>` containers allow natural content flow

   **Before:**
   ```jsx
   <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
   ```

   **After:**
   ```jsx
   <div>
   ```

USER EXPERIENCE IMPROVEMENTS:

1. **Cleaner Repository Selection** ✅:
   - Repository dropdown shows only existing, valid repositories
   - No confusing "Add new repository" option that users didn't need
   - Streamlined workflow focused on selecting from available repositories

2. **Restored Modal Dimensions** ✅:
   - Modal size now matches the comfortable dimensions from "Base image" tab
   - No more "super small" modal that felt cramped
   - Natural content flow without artificial height constraints

3. **Consistent with Original Design** ✅:
   - Matches the original UX that worked well for "Base image"
   - No forced height constraints that caused layout issues
   - Content-driven sizing provides optimal user experience

4. **Better Dropdown Visibility** ✅:
   - Combined with collapsible Extended support subscription
   - Package dropdowns have sufficient room to display fully
   - Auto-scroll functionality still works for ensuring visibility

TECHNICAL IMPACT:

**Simplified Repository Logic:**
- Removed unused "Add new repository" conditional rendering
- Cleaner dropdown implementation with existing repositories only
- Maintained `handleRepositorySearchSelect` function for valid repository selection

**Natural Modal Sizing:**
- Modal auto-sizes based on content like original design
- No artificial height constraints causing layout problems
- Consistent behavior across different content lengths

**Content Flow Restoration:**
- Tab content flows naturally without flex constraints
- Original responsive behavior maintained
- No forced height calculations or overflow issues

TESTING SCENARIOS:
- ✅ Repository dropdown shows only existing repositories (no "Add new" option)
- ✅ Modal dimensions comfortable and spacious like "Base image" tab
- ✅ Package dropdowns fully visible with collapsible Extended support
- ✅ Content scrolls naturally without height constraints
- ✅ Tab switching smooth without jarring size changes
- ✅ All existing functionality preserved (package selection, Lightspeed, etc.)

STATUS: ✅ COMPLETED - Modal reverted to original comfortable dimensions with cleaner repository dropdown interface

=============================

CHANGE #44: Hide Search Input for Locked Repository Rows While Preserving Package Labels
Location: BuildImageModal.tsx - Package search input and dropdown visibility logic
Date: [Current Date]

ENHANCEMENT: When a new repository is added via "Add Repository", previous repository rows are properly locked - search input and dropdown disappear while package selection labels remain visible.

**User Request**: "When I add a new repository, the search bar for the old selections should go away, but the labelling can stay"

SOLUTION IMPLEMENTED:

1. **Enhanced Search Input Visibility Logic** 🔍:
   - **Added locked row condition**: `!(row.isLocked && (row.selectedPackages?.length ?? 0) > 0)`
   - **Behavior**: Search input hidden for locked rows that have selected packages
   - **Preserves labels**: Package chips/labels remain visible above the hidden search input

   **Updated Condition:**
   ```jsx
   {/* Show search input unless OpenSCAP, "all packages" selected, or row is locked with selections */}
   {!row.isOpenSCAPRequired && 
    !row.selectedPackages?.some(pkg => pkg.isAllPackages) && 
    !(row.isLocked && (row.selectedPackages?.length ?? 0) > 0) && (
     <SearchInput />
   )}
   ```

2. **Enhanced Dropdown Visibility Logic** 📋:
   - **Matching condition**: Applied same logic to search results dropdown
   - **Consistent behavior**: Both search input and dropdown disappear together
   - **Clean interface**: No orphaned dropdowns when search input is hidden

   **Updated Condition:**
   ```jsx
   {/* Search Results Dropdown for this row */}
   {!row.isOpenSCAPRequired && 
    !row.selectedPackages?.some(pkg => pkg.isAllPackages) && 
    !(row.isLocked && (row.selectedPackages?.length ?? 0) > 0) && 
    (row.isLoading || row.searchResults.length > 0 || ...) && (
     <div>/* dropdown content */</div>
   )}
   ```

3. **Leveraged Existing Locking Logic** 🔒:
   - **addRepositoryRow function**: Already had proper locking mechanism
   - **Locks all existing rows**: When "Add Repository" is clicked
   - **Preserves OpenSCAP rows**: OpenSCAP packages remain unchanged
   - **Sets proper flags**: `isLocked: true, isRepositorySearching: false`

USER EXPERIENCE IMPROVEMENTS:

1. **Clean Workflow** ✅:
   - Select repository → Search packages → Select packages → See package labels
   - Click "Add Repository" → **Search disappears**, **labels stay** → New row appears
   - Previous selections clearly visible but no longer interactive

2. **Visual Hierarchy** ✅:
   - **Active row**: Shows search input and dropdown for package selection
   - **Completed rows**: Show only package labels with no search functionality  
   - **Clear distinction**: Easy to see which row is active vs completed

3. **Prevents Confusion** ✅:
   - No multiple active search inputs competing for attention
   - Clear workflow: one active row at a time for package selection
   - Previous selections preserved visually without interaction clutter

4. **Maintains Package Visibility** ✅:
   - Selected package chips/labels remain fully visible
   - Repository information still displayed
   - Remove buttons still functional for package management
   - Only search interface disappears, not the selection results

TECHNICAL IMPLEMENTATION:

**Search Input Logic Enhancement:**
```jsx
// Before: Only checked OpenSCAP and "all packages"
{!row.isOpenSCAPRequired && !row.selectedPackages?.some(pkg => pkg.isAllPackages) && (
  <SearchInput />
)}

// After: Also checks for locked rows with selections  
{!row.isOpenSCAPRequired && 
 !row.selectedPackages?.some(pkg => pkg.isAllPackages) && 
 !(row.isLocked && (row.selectedPackages?.length ?? 0) > 0) && (
  <SearchInput />
)}
```

**Dropdown Logic Enhancement:**
- Applied identical condition to search results dropdown
- Ensures consistency between search input and dropdown visibility
- Prevents orphaned UI elements when search input is hidden

**Existing Locking Mechanism:**
```jsx
const addRepositoryRow = () => {
  // Lock all existing non-OpenSCAP rows when adding a new one
  const lockedRows = repositoryRows.map(row => {
    if (!row.isOpenSCAPRequired && row.repository) {
      return { ...row, isLocked: true, isRepositorySearching: false };
    }
    return row;
  });
  // Add new unlocked row...
};
```

TESTING SCENARIOS:
- ✅ Select repository → Search packages → Select packages → Package labels visible
- ✅ Click "Add Repository" → Previous row search input disappears
- ✅ Previous row package labels still visible and removable  
- ✅ New repository row appears with active search functionality
- ✅ OpenSCAP rows remain unchanged and properly isolated
- ✅ Multiple package selections display as labels when locked
- ✅ "All packages" selections display properly when locked

STATUS: ✅ COMPLETED - Repository row locking enhanced to hide search while preserving package label visibility

=============================

CHANGE #45: OpenSCAP Package Display Consistency and RHEL Lightspeed Branding
Location: BuildImageModal.tsx - OpenSCAP packages initial state and Lightspeed recommendations styling
Date: [Current Date]

CONSISTENCY IMPROVEMENTS: Enhanced OpenSCAP package display to match multi-selection pattern and updated Lightspeed recommendations with proper RHEL branding.

**User Requests**: 
1. "OpenSCAP packages (aide and sudo) should now be in the same row as labels that cannot be removed, to keep the pattern consistent with how the UI handles user selecting multiple packages"
2. "Lightspeed selectors don't need to be orange but they do need to say RHEL Lightspeed somewhere on them"

CHANGES IMPLEMENTED:

1. **OpenSCAP Package Consistency** 🔧:
   - **Combined separate rows**: Merged aide and sudo into single row with `selectedPackages` array
   - **Consistent pattern**: Now matches user multi-selection display exactly
   - **Label behavior**: Both packages display as non-removable chips in same row
   - **Preserved functionality**: "Added by OpenSCAP" helper text still appears

   **Before (Separate Rows):**
   ```jsx
   // Two separate rows for aide and sudo
   {
     id: 'openscap-1',
     selectedPackage: { id: 'aide', name: 'aide', version: '0.16' },
     isOpenSCAPRequired: true
   },
   {
     id: 'openscap-2', 
     selectedPackage: { id: 'sudo', name: 'sudo', version: '1.9.5p2' },
     isOpenSCAPRequired: true
   }
   ```

   **After (Single Row with Multiple Packages):**
   ```jsx
   // One row with both packages as labels
   {
     id: 'openscap-1',
     selectedPackages: [
       { id: 'aide', name: 'aide', version: '0.16', repository: 'BaseOS' },
       { id: 'sudo', name: 'sudo', version: '1.9.5p2', repository: 'BaseOS' }
     ],
     isOpenSCAPRequired: true
   }
   ```

2. **RHEL Lightspeed Branding & Styling** 🪄:
   - **Removed orange styling**: Changed from orange (`#fff7e6`, `#d97706`) to neutral gray (`#f8f9fa`, `#0066cc`)
   - **Added RHEL branding**: "RHEL Lightspeed" text appears next to each recommendation
   - **Professional appearance**: Blue magic wand icon with proper branding
   - **Maintained functionality**: Click-to-add and hover effects preserved

   **Updated Styling:**
   ```jsx
   // Background: Neutral gray instead of orange
   backgroundColor: '#f8f9fa' // was '#fff7e6'
   onMouseEnter: '#e9ecef'   // was '#fef3c7'
   
   // Icon: Blue instead of orange  
   <MagicIcon style={{ fontSize: '14px', color: '#0066cc' }} /> // was '#d97706'
   
   // Branding: Added RHEL Lightspeed text
   <span style={{ fontSize: '0.7rem', color: '#666', fontStyle: 'italic' }}>
     RHEL Lightspeed
   </span>
   ```

USER EXPERIENCE IMPROVEMENTS:

1. **OpenSCAP Consistency** ✅:
   - OpenSCAP packages now display exactly like user multi-selections
   - Single row with aide and sudo as label chips
   - Visual consistency across all package selection patterns
   - Clear "Added by OpenSCAP" identification maintained

2. **Professional Lightspeed Branding** ✅:
   - "RHEL Lightspeed" clearly identifies AI-powered recommendations
   - Neutral styling fits better with overall interface design
   - Blue magic wand icon aligns with PatternFly color scheme
   - Professional appearance without distracting orange colors

3. **Pattern Consistency** ✅:
   - All multi-package selections use same visual pattern
   - OpenSCAP and user selections indistinguishable by layout
   - Only difference is non-removable nature of OpenSCAP packages
   - Unified user experience across all package types

TECHNICAL IMPLEMENTATION:

**OpenSCAP Data Structure:**
- Moved from `selectedPackage` (singular) to `selectedPackages` (array)
- Maintained backward compatibility with existing rendering logic
- Preserved `isOpenSCAPRequired` flag for special handling
- Single row displays both packages as chips with "Added by OpenSCAP" text

**Lightspeed Styling:**
- Neutral gray background (`#f8f9fa`) instead of orange theme
- Blue magic wand icon (`#0066cc`) matching PatternFly standards  
- "RHEL Lightspeed" text positioned after package name
- Italic, smaller font styling for branding text

**Visual Design:**
- OpenSCAP: Two non-removable blue chips in single row
- Lightspeed: Gray background, blue icon, clear RHEL branding
- Consistent with overall interface color scheme
- Professional appearance suitable for enterprise users

TESTING SCENARIOS:
- ✅ OpenSCAP packages display as two chips in single row (aide, sudo)
- ✅ "Added by OpenSCAP" text appears below OpenSCAP packages
- ✅ OpenSCAP chips are non-removable (no X icons)
- ✅ Lightspeed recommendations show "RHEL Lightspeed" branding
- ✅ Lightspeed styling uses neutral gray/blue instead of orange
- ✅ All package selection patterns visually consistent
- ✅ Magic wand icons appear correctly with blue color

STATUS: ✅ COMPLETED - OpenSCAP packages now display consistently with multi-selection pattern, Lightspeed recommendations properly branded with RHEL

=============================

CHANGE #46: Removed Unnecessary Dropdown Text Sections for Cleaner Interface
Location: BuildImageModal.tsx - Package search dropdown content
Date: [Current Date]

CLEANUP: Removed instructional and error text sections from package dropdown to create a cleaner, more focused user interface.

**User Request**: "let's remove the section in the dropdown that says 'Or search for specific packages...' and 'No packages found'"

REMOVED TEXT SECTIONS:

1. **"Or search for specific packages below:"**:
   - **Location**: Appeared after "Add all packages from [Repository]" option
   - **Style**: Small italic gray text with bottom border
   - **Reason for removal**: Redundant instruction that cluttered the interface
   - **Result**: Cleaner visual hierarchy with immediate focus on actionable options

2. **"No packages found. Try typing the full package name."**:
   - **Location**: Displayed when search returned zero results
   - **Style**: Centered gray text in dropdown
   - **Reason for removal**: Unnecessary error messaging that interrupted user flow
   - **Result**: Streamlined experience without negative feedback

TECHNICAL IMPLEMENTATION:

**Removed Code Blocks:**
```jsx
// Removed instructional text after "Add all packages"
<div style={{ 
  padding: '8px 16px',
  fontSize: '0.75rem',
  color: '#666',
  borderBottom: '1px solid #f0f0f0',
  fontStyle: 'italic'
}}>
  Or search for specific packages below:
</div>

// Removed "no results" message
) : (
  <div style={{ 
    padding: '16px',
    textAlign: 'center',
    color: '#666',
    fontSize: '0.875rem'
  }}>
    No packages found. Try typing the full package name.
  </div>
)}
```

**Fixed Conditional Structure:**
- Simplified complex ternary conditional that was causing syntax errors
- Replaced `condition ? content : null` pattern for cleaner logic
- Maintained all existing functionality while removing unnecessary text

USER EXPERIENCE IMPROVEMENTS:

1. **Cleaner Visual Hierarchy** ✅:
   - Removed instructional clutter from dropdown
   - Users immediately see actionable options
   - Focus directed to "Add all packages" and search results

2. **Streamlined Interface** ✅:
   - No redundant "or search below" instructions
   - No negative "no results" messaging
   - Professional, minimal appearance

3. **Improved Flow** ✅:
   - Users understand interface without extra text
   - Dropdown shows only relevant, clickable options
   - Reduced cognitive load with fewer text elements

4. **Maintained Functionality** ✅:
   - Search prompt still appears when user types
   - Loading states still show appropriately  
   - All interactive elements preserved

CURRENT DROPDOWN CONTENT:
1. **"Add all packages from [Repository]"** with package count
2. **Loading spinner** when searching
3. **Search results** (up to 5 packages) 
4. **Search prompt** ("Click the arrow or press Enter to search")
5. **RHEL Lightspeed recommendations** with magic wand icons

VISUAL DESIGN:
- Clean, focused interface without instructional text
- Professional appearance suitable for enterprise users
- Clear actionable options without interface clutter
- Consistent with overall PatternFly design standards

STATUS: ✅ COMPLETED - Dropdown interface cleaned up with unnecessary text sections removed for improved user experience

=============================

[Future changes will be added below this line] 

=============================

CHANGE #35: Browse Table Interface Removal
Location: BuildImageModal.tsx - Repositories and Packages section
Date: [Current Date]

SUMMARY: Removed the "Browse Table" option from package discovery interface due to performance concerns, keeping only the streamlined "Search & Add" functionality.

REMOVED COMPONENTS:
1. **Interface Toggle Buttons**: Eliminated "Browse Table" vs "Search & Add" toggle buttons and description
2. **Browse-Related State**: Removed packageInterfaceMode state control, expandedRepositories, repositorySearchTerm, repositoryPackageSearchTerms, repositoryPagination state variables
3. **Helper Functions**: Removed all browse table helper functions including:
   - getFilteredPackagesForRepository()
   - updateRepositoryPackageSearch() 
   - updateRepositoryPagination()
   - handleRepositoryToggle()
   - getFilteredRepositoryData()
   - handleTablePackageSelection()
   - handleTablePackageDeselection()
   - isPackageSelected()
   - getRepositoryNameById()

4. **Browse Table UI**: Removed entire repository table interface including:
   - Repository search field
   - Fixed-size repository table with expandable rows
   - Per-repository package search
   - Package selection checkboxes within expanded repositories
   - Pagination controls for both repositories and packages
   - Complex grid layouts and styling

RETAINED FUNCTIONALITY:
- **Search Interface**: Repository row-based search and package selection
- **Selected Packages Summary Table**: Table showing all selected packages with repository information and remove functionality
- **Add Repository Button**: Ability to add new repository rows
- **OpenSCAP Integration**: Required packages remain locked and functional

IMPLEMENTATION APPROACH:
- Set packageInterfaceMode to constant 'search' value instead of state variable
- Removed toggle UI components
- Conditional rendering now always shows search interface (browse code still exists but unreachable)
- Browse table state variables removed to prevent linter references

PURPOSE: Performance optimization - the browse table interface was designed to handle up to 25,000 packages per repository with complex pagination and search, which was causing slowdowns. The streamlined search interface provides adequate functionality for typical package selection workflows while being much more responsive.

TECHNICAL IMPACT:
- Reduced component complexity and state management overhead
- Eliminated expensive pagination calculations and filtering operations
- Simplified UI rendering with fewer conditional branches
- Maintained backward compatibility for package selection functionality
- Browse table code remains but is unreachable (can be cleaned up in future)

USER EXPERIENCE: Users now have a single, focused interface for package discovery that loads faster and provides clear feedback through the selected packages summary table. The interface feels much more responsive without the heavyweight browse functionality.

STATUS: ✅ COMPLETED - Development server running successfully at http://localhost:9001

=============================